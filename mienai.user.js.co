`// ==UserScript==
// @name        Mienai
// @author      queue
// @description Hidden thread synchronization between 4chan and catalog.neet.tv.
// @namespace   http://hakase.org
//
// @version     0.2.0
//
// @match       http://catalog.neet.tv/*
// @match       *://boards.4chan.org/*
//
// @grant       none
// ==/UserScript==
`

"use strict"

const catalog = \catalog.neet.tv
const yotsuba = \boards.4chan.org

inject = !(code) ->
  document.createElement \script
    &textContent = "(
      #{if typeof code is \function
          code.toString()
        else
          "function () {#code}"
      }())"
    document.head.appendChild(&)

    # cleanup
    setTimeout do
      !-> document.head.removeChild(&)
      100ms

# defaults to new object
get = -> try JSON.parse localStorage[it] catch {}
set = !(key, val) -> localStorage[key] = JSON.stringify val

# Handlers for each class of page
catalog-iframe =  !->
  addEventListener \message !({data, origin}: e) ->
    console.log origin
    # the catalog only exists on HTTP, so explicitly handle both 4chan origins
    unless data? and (origin is "http://#yotsuba" or origin is "https://#yotsuba")
      return

    if (board = data.board)
      hidden = get "hide-#board"

      if data.hide
        console.log "setting hide: #that on catalog iframe"
        hidden[that] = true
      else if data.show
        console.log "setting show: #that on catalog iframe"
        delete hidden[that]

      set "hide-#board" hidden

catalog-page = !->
  # get existing hidden threads, if any, so we can see which threads became
  # hidden after the mutation event. Unlike 4chan-JS, fourcat doesn't expose
  # the list of hidden threads outside of localStorage.
  hidden = get "hide-#board"

  addEventListener \storage !(e) ->
    console.log "catalog iframe changed data, updating catalog page..."
    # our iframe counterpart changed something, so update DOM to match
    hidden := get "hide-#board"

    # because fourcat keeps its variables private, the best way I can think
    # to resynchronize the state of the UI is to clearHiddenThreads() then
    # toggleHiddenThread for each thread, by making synthetic events on their
    # elements. really nead a pull request for better hooks here.
    console.log "resetting hidden threads on catalog..."
    document.getElementById \filters-clear-hidden .click!
    for tid in hidden
      if (thumb = document.getElementById "thumb-#tid")

        # simulate shift-click
        document.createEvent \MouseEvent
          &initMouseEvent do
            \mousedown true true
            window
            1 # click count
            0 0 0 0 # position, don't care
            false # ctrl
            false # alt
            true # shift
            false # meta
            0 # button
            null

          thumb.dispatchEvent(&)

  loading = 2 # async madness
  onload = !->
    if (--loading) is 0
      # hide existing threads
      console.log "sending existing threads to 4chan from catalog..."
      send hide: t for t in get "hide-#board"

  http-frame = document.createElement \iframe
    &src = "http://#yotsuba/robots.txt"
    &id = \yotsuba-http
    &addEventListener \load onload
    document.head.appendChild(&)

  https-frame = document.createElement \iframe
    &src = "https://#yotsuba/robots.txt"
    &id = \yotsuba-https
    &addEventListener \load onload
    document.head.appendChild(&)

  send = !->
    it.board = board
    # XXX chrome doesn't allow access to contentWindow from a userscript, for
    # whatever reason. injection to get around this
    if http-frame.contentWindow
      http-frame.contentWindow.postMessage it, "http://#yotsuba"
      https-frame.contentWindow.postMessage it, "https://#yotsuba"
    else
      inject do
        "console.log('injection');document.getElementById('yotsuba-http')
          .contentWindow.postMessage(#{JSON.stringify it }, 'http://#yotsuba');
         document.getElementById('yotsuba-https')
          .contentWindow.postMessage(#{JSON.stringify it}, 'https://#yotsuba')"

  # Detect thread hide events. Until I can make a pull request for actual
  # CustomEvents on thread hide, this is a hack to detect 'storage' changes.
  # What is also infurating is the fact that the 'storage' event _only_ fires
  # on windows _other_ than the one that makes the change. I cannot fathom how
  # that is more useful than having it fire everywhere. So instead, listen to
  # DOM changes
  o = new (window.MutationObserver or window.WebKitMutationObserver) !->
    console.log "checking for new hidden threads on catalog..."

    new-hidden = try JSON.parse localStorage."hide-#board"
    if new-hidden
      for t in new-hidden
        send hide: t unless t in hidden # was already hidden
      for t in hidden
        send show: t unless t in new-hidden # no longer hidden
    else
      # hash was removed, unhide all
      send show: t for t in hidden

    # update
    hidden := new-hidden or {}
  o.observe do
    document.getElementById \hidden-label
    {+attributes, attributeFilter: <[style]>} # hidden and unhidden
  o.observe do
    document.getElementById \hidden-count
    {+childList} # when textContent "count" changes

yotsuba-iframe = !->
  addEventListener \message !({data, origin}: e) ->
    return unless data? and origin is "http://#catalog"

    return unless (board = data.board)

    yotsuba-hidden = get "4chan-hide-t-#board"
    x-hidden = get "4chan_x.hiddenThreads/#board/"

    if data.hide
      console.log "setting hide: #that on 4chan iframe"
      yotsuba-hidden[that] = x-hidden[that] = Date.now!
    else if data.show
      console.log "setting show: #that on 4chan iframe"
      delete yotsuba-hidden[that]
      delete x-hidden[that]

    set "4chan-hide-t-#board" yotsuba-hidden
    set "4chan_x.hiddenThreads/#board/" x-hidden

yotsuba-page = !->
  inject !->
    if Config and not Config.disableAll and Config.threadHiding
      addEventListener \storage !(e) ->
        console.log "4chan iframe changed, hiding new threads..."

        new-hidden =
          try JSON.parse localStorage"4chan-hide-t-#{Main.board}" catch {}

        for thread of document.querySelectorAll \.thread
          tid = thread.id.substring 1
          if tid in new-hidden and not tid not in ThreadHiding.hidden
            console.log "hiding #tid on 4chan"
            ThreadHiding.unwrapped_hide tid
          else if document.getElementById "sa#tid" ?.hasAttribute \data-hidden
            console.log "unhiding #tid on 4chan"
            ThreadHiding.unwrapped_show tid

        ThreadHiding.hidden = new-hidden

  # detect 4chan-X
  # since X is also a userscript, there's no point in injecting code
  if localStorage.getItem \4chan_x.lastUpdate
    console.log "4chan-X detected..."

    hidden = get "4chan_x.hiddenThreads/#board/"

    addEventListener \storage !->
      console.log "4chan iframe changed, hiding new threads 4chan-X style..."

      new-hidden = get "4chan_x.hiddenThreads/#board/"

      for thread of document.querySelectorAll \.thread
        tid = thread.id.substring 1
        if tid in new-hidden and not tid not in hidden
          console.log "hiding #tid on 4chan-X"

          # let 4chanX handle stub code
          if thread.querySelector \.hide-thread-button
            that.click!

        else if thread.hidden
          console.log "unhiding #tid on 4chan-X"
          if thread.querySelector \.hidden_thread # stub
            that.parentNode.removeChild that
          thread.hidden = false
          thread.nextElementSibling.hidden = false

      hidden := new-hidden


  frame = document.createElement \iframe
    &src = "http://#catalog/robots.txt" # catalog is only HTTP, no S
    &id = \neet-frame
    &addEventListener \load !->
      # hide existing threads on catalog
      console.log "sending hidden threads to catalog from 4chan..."
      send hide: t for t in get "4chan-hide-t-#board"
      if hidden
        send hide: t for t in hidden
    document.head.appendChild(&)

  send = !->
    it.board = board
    # see note about chrome
    if frame.contentWindow
      that.postMessage it, "http://#catalog"
    else
      inject "document.getElementById('neet-frame')
        .contentWindow.postMessage(#{JSON.stringify it}, 'http://#catalog')"

  # wrap ThreadHiding to send us custom events
  inject !->
    if Config and not Config.disableAll and Config.threadHiding
      console.log "adding customEvent wrappers to 4chan..."
      ThreadHiding <<<
        unwrapped_show: ThreadHiding.show
        show: !(tid) ->
          @unwrapped_show tid
          document.dispatchEvent new CustomEvent \4chan-show-thread detail: tid

        unwrapped_hide: ThreadHiding.hide
        hide: !(tid) ->
          @unwrapped_hide tid
          document.dispatchEvent new CustomEvent \4chan-hide-thread detail: tid

  # listen to those
  document
    &addEventListener \4chan-hide-thread !({detail: tid}) -> send hide: tid
    &addEventListener \4chan-show-thread !({detail: tid}) -> send show: tid

# route page to handler
switch location.hostname
case catalog
  if location.pathname is \/robots.txt
    do catalog-iframe
  else if location.pathname.match /^\/([a-z]+)\/$/
    board = that.1
    do catalog-page

case yotsuba
  if location.pathname is \/robots.txt
    do yotsuba-iframe
  else if location.pathname.match /^\/([a-z]+)\/(?:\d+)?$/ # board page
    board = that.1
    do yotsuba-page

